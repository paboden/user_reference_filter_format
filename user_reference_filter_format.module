<?php
/**
 * @file
 * Module file for user_reference_filter_format.
 */

/**
 * Implements hook_filter_info().
 */
function user_reference_filter_format_filter_info() {
  $filters['user_reference_filter'] = array(
    // Title is the text on the format settings checkbox.
    'title' => t('@username replaced with a link to that users profile page.'),
    // Callback function to process the matches we find.
    'process callback' => '_user_reference_filter_process',
    // Callback function to add the filter tip content.
    'tips callback' => '_user_reference_filter_tips',
  );

  return $filters;
}

/**
 * Implements callback_filter_process().
 *
 * Converts text into hyperlinks automatically.
 *
 * This filter identifies and makes clickable twitter style usernames (@username).
 */
function _user_reference_filter_process($text, $filter) {
  // Tags to skip and not recurse into.
  $ignore_tags = 'a|script|style|code|pre';

  // Match @username.
  $pattern = "/@([a-z0-9_]+)/i";

  // Callback to process matched usernames
  $task = '_user_reference_parse_usernames';

  // HTML comments need to be handled separately, as they may contain HTML
  // markup, especially a '>'. Therefore, remove all comment contents and add
  // them back later.
  _filter_url_escape_comments('', TRUE);
  $text = preg_replace_callback('`<!--(.*?)-->`s', '_filter_url_escape_comments', $text);

  // Split at all tags; ensures that no tags or attributes are processed.
  $chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);

  // PHP ensures that the array consists of alternating delimiters and
  // literals, and begins and ends with a literal (inserting NULL as
  // required). Therefore, the first chunk is always text:
  $chunk_type = 'text';

  // If a tag of $ignore_tags is found, it is stored in $open_tag and only
  // removed when the closing tag is found. Until the closing tag is found,
  // no replacements are made.
  $open_tag = '';

  for ($i = 0; $i < count($chunks); $i++) {
    if ($chunk_type == 'text') {
      // Only process this text if there are no unclosed $ignore_tags.
      if ($open_tag == '') {
        // If there is a match, inject a link into this chunk via the callback
        // function contained in $task.
        $chunks[$i] = preg_replace_callback($pattern, $task, $chunks[$i]);
      }
      // Text chunk is done, so next chunk must be a tag.
      $chunk_type = 'tag';
    }
    else {
      // Only process this tag if there are no unclosed $ignore_tags.
      if ($open_tag == '') {
        // Check whether this tag is contained in $ignore_tags.
        if (preg_match("`<($ignore_tags)(?:\s|>)`i", $chunks[$i], $matches)) {
          $open_tag = $matches[1];
        }
      }
      // Otherwise, check whether this is the closing tag for $open_tag.
      else {
        if (preg_match("`<\/$open_tag>`i", $chunks[$i], $matches)) {
          $open_tag = '';
        }
      }
      // Tag chunk is done, so next chunk must be text.
      $chunk_type = 'text';
    }
  }

  // Revert back to the original comment contents
  $text = implode($chunks);
  _filter_url_escape_comments('', FALSE);
  $text = preg_replace_callback('`<!--(.*?)-->`', '_filter_url_escape_comments', $text);

  return $text;
}

/**
 * Makes links out of @usernames.
 *
 * Callback for preg_replace_callback() within _filter_url().
 */
function _user_reference_parse_usernames($match) {
  // Get the username from match array
  $username = check_plain(decode_entities($match[1]));

  // Load the user object from the username. This will return an object if a user
  // exists. else it will return FALSE/NULL.
  $account = user_load_by_name($username);

  if (!empty($account)) {
    // If their is a user object that matches the username, return a link to the
    // users profile page.
    return l('@' . $username, '/user/' . $account->uid, array('attributes' => array('class' => array('referenced-user-link', 'user-link'))));
    //return theme('username', array('account' => $account));
  }
  else {
    // else just return the original text (first component in the match array)
    return $match[0];
  }
}

/**
 * Filter tips callback for user_reference_filter_format filter.
 */
function _user_reference_filter_tips($filter, $format, $long = FALSE) {
  return t('<em>@username</em> is replaced with the a link to that users profile page.');
}