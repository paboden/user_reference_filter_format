<?php
/**
 * @file
 * Module file for user_reference_filter_format.
 */

/**
 * Implements hook_filter_info().
 */
function user_reference_filter_format_filter_info() {
  $filters['user_reference_filter'] = array(
    // Title is the text on the format settings checkbox.
    'title' => t('<em>@user_reference</em> replaced with a link to that users profile page.'),

    // Callback function to process the matches we find.
    'process callback' => '_user_reference_filter_process',

    // Callback function to add the filter tip content.
    'tips callback' => '_user_reference_filter_tips',
  );

  return $filters;
}

/**
 * Implements callback_filter_process().
 *
 * Converts text into hyperlinks automatically.
 * This filter identifies and makes clickable twitter style usernames (@username).
 */
function _user_reference_filter_process($text, $filter) {
  // Match @user_reference or @username or @42 (uid).
  $pattern = _user_reference_filter_get_pattern();

  // Callback to process matched usernames.
  $task = '_user_reference_parse_usernames';

  // Process text.
  $text = preg_replace_callback($pattern, $task, $text);

  return $text;
}

/**
 * Gets the desired filtering pattern.
 */
function _user_reference_filter_get_pattern() {
  // drupal cache value goes here
  // else process the pattern.
  $pattern = variable_get('user_mention_pattern', 0);

  switch ($pattern) {
    case 0 :
      $pattern = "/[^\S]@([a-z0-9(\.\_\-\?\&\%\#)]+)/i";
      break;
    default :
      $pattern = "/[^\S]@([a-z0-9(\.\_\-\?\&\%\#)]+)/i";
      break;
  }

  return $pattern;
}

/**
 * Makes links out of @usernames.
 *
 * Callback for preg_replace_callback() within _filter_url().
 */
function _user_reference_parse_usernames($match) {
  $user = NULL;

  $username = $match[1];

  // Get the username from match array. If its completely numberic, try loading
  // user by uid matching. (do not allow anonymous to be processed).
  if (is_numeric($match[1]) && ($match[1] != 0)) {
    //$match[1] = _user_reference_filter_remove_blacklisted_user(array($match[1])) ? $match[1] : NULL;
    $user = $match[1] ? user_load($match[1]) : NULL;
  }

  // if realname module, get the user object from the realname value.
  elseif (module_exists('realname')) {
    $name = check_plain(decode_entities($match[1]));
    $name = str_replace('_', ' ', $name);
    $uid = db_query("SELECT uid, realname FROM {realname} WHERE realname IN (:realname)", array(':realname' => $name))->fetchAssoc();
    //$uid = _user_reference_filter_remove_blacklisted_user(array($uid));
    $user = $uid ? user_load($uid['uid']) : NULL;
  }

  // if realname or uid doesn't return anything, try getting user from username
  // match.
  $user = empty($user) ? user_load_by_name($username) : $user;
/*
  if ($user) {
    $user = _user_reference_filter_remove_blacklisted_user(array($user->uid)) ? $user : NULL;
  }
*/

  // If username or realname returns, return a link to the users profile page.
  if (!empty($user)) {
    return theme('user_reference_filter_format', array('account' => $user));
  }

  // else just return the original text (first component in the match array).
  else {
    return $match[0];
  }
}

/**
 * Run potential usernames, realnames, and uid's through a blacklist.
 */
function _user_reference_filter_remove_blacklisted_user($uid) {
  //variable_get('user_reference_blacklist', array(0));
  //return array_diff($uid, variable_get('user_reference_blacklist', array()));
  return TRUE;
}

/**
 * Filter tips callback for user_reference_filter_format filter.
 */
function _user_reference_filter_tips($filter, $format, $long = FALSE) {
  return t('<em>@User_Name</em> is replaced with the a link to that users profile page.');
}

/**
 * Implements hook_theme().
 */
function user_reference_filter_format_theme() {
  return array(
    'user_reference_filter_format' => array(
      'variables' => array('account' => NULL),
    ),
  );
}

/**
 * Returns HTML for a username, potentially linked to the user's page.
 */
function theme_user_reference_filter_format($variables) {
  if (isset($variables['link_path'])) {
    // We have a link path, so we should generate a link using l().
    $output = l($variables['prefix'] . $variables['name'] . $variables['extra'], $variables['link_path'], $variables['link_options']);
  }
  else {
    // Modules may have added important attributes so they must be included in the output.
    $output = '<span' . drupal_attributes($variables['attributes_array']) . '>' . $variables['prefix'] . $variables['name'] . $variables['extra'] . '</span>';
  }

  return $output;
}

/**
 * Implements template_preprocess_user_reference_filter_format().
 */
function template_preprocess_user_reference_filter_format(&$variables) {
  $account = $variables ['account'];

  $variables ['prefix'] = ' @';

  $variables ['extra'] = '';
  if (empty($account->uid)) {
    $variables ['uid'] = 0;
    if (theme_get_setting('toggle_comment_user_verification')) {
      $variables ['extra'] = ' (' . t('not verified') . ')';
    }
  }
  else {
    $variables ['uid'] = (int) $account->uid;
  }

  // Set the name to a formatted name that is safe for printing and
  // that won't break tables by being too long. Keep an unshortened,
  // unsanitized version, in case other preprocess functions want to implement
  // their own shortening logic or add markup. If they do so, they must ensure
  // that $variables['name'] is safe for printing.
  $name = $variables ['name_raw'] = format_username($account);
  if (drupal_strlen($name) > 20) {
    $name = drupal_substr($name, 0, 15) . '...';
  }
  $variables ['name'] = check_plain($name);

  $variables ['profile_access'] = user_access('access user profiles');
  $variables ['link_attributes'] = array();
  // Populate link path and attributes if appropriate.
  if ($variables ['uid'] && $variables ['profile_access']) {
    // We are linking to a local user.
    $variables ['link_attributes'] = array('title' => t('View user profile.'));
    $variables ['link_path'] = 'user/' . $variables ['uid'];
  }
  elseif (!empty($account->homepage)) {
    // Like the 'class' attribute, the 'rel' attribute can hold a
    // space-separated set of values, so initialize it as an array to make it
    // easier for other preprocess functions to append to it.
    $variables ['link_attributes'] = array('rel' => array('nofollow'));
    $variables ['link_path'] = $account->homepage;
    $variables ['homepage'] = $account->homepage;
  }
  // We do not want the l() function to check_plain() a second time.
  $variables ['link_options']['html'] = TRUE;
  // Set a default class.
  $variables ['attributes_array'] = array('class' => array('username'));
}
